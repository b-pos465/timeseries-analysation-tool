"use strict";angular.module("TimeseriesAnalysationTool",[]),angular.module("TimeseriesAnalysationTool").directive("threeDimChart",function(DividingService,AggregatingService,TimeseriesUtil,$timeout,$filter){return{templateUrl:"app/chart/three-dim-chart.html",restrict:"E",scope:{externData:"=data"},link:function(scope){function selectMostFittingResolution(e){for(var s=1;scope.possibleResolutions[s].value<=e.stepLength;)s++;return s--,scope.possibleResolutions[s]}function convertFromFunctionExpression(surface){for(var data=[],x=0;x<surface.specs.count;x++)data.push(eval(surface.specs.funcTerm));return data}function resetAxes(){LAYOUT.scene.yaxis.title=LAYOUT.scene.xaxis.title=""}scope.formatNumber=function(e){return $filter("number")(e,2)},scope.range=[0,1],scope.currentMin=scope.range[0],scope.currentMax=scope.range[1],scope.possibleColorscales=["Greys","YIGnBu","Greens","YIOrRd","Bluered","RdBu","Reds","Blues","Picnic","Rainbow","Portland","Jet","Hot","Blackbody","Earth","Electric","Viridis"],scope.possibleResolutions=DividingService.possibleResolutions,scope.possibleAggregations=AggregatingService.possibleAggregations;var LAYOUT={title:null,autosize:!1,width:$(document).width()/2,height:$(document).width()/2,margin:{l:65,r:50,b:65,t:90},scene:{zaxis:{title:"Wert"},yaxis:{},xaxis:{}}};scope.$watch("externData",function(e){if(e){if("function"===e.type){if(!angular.isString(e.specs.funcTerm))throw"Expected an String in specs.values but didn't find it!";$timeout(function(){scope.rawData=convertFromFunctionExpression(e),scope.timeseries=TimeseriesUtil.newTimeseries(e.specs.startDate,e.specs.stepLength,scope.rawData)})}else{if("array"!==e.type)throw"Unrecognized data type!";if(!angular.isArray(e.specs.values))throw"Expected an array in specs.values but didn't find it!";scope.rawData=e.specs.values,scope.timeseries=TimeseriesUtil.newTimeseries(e.specs.startDate,e.specs.stepLength,scope.rawData)}scope.range[0]=Math.min.apply(Math,scope.rawData),scope.range[1]=Math.max.apply(Math,scope.rawData),scope.currentMin=scope.range[0],scope.currentMax=scope.range[1],scope.options={yaxis:scope.possibleResolutions[0].text}}}),scope.$watch("options",function(e,s){var t=void 0,i=void 0,n=void 0;if(e){if(scope.timeseries=TimeseriesUtil.newTimeseries(scope.externData.specs.startDate,scope.externData.specs.stepLength,scope.rawData),resetAxes(),s&&e.yaxis!==s.yaxis&&(e.xaxis=null),e.yaxis)for(var r=0;r<scope.possibleResolutions.length;r++)scope.possibleResolutions[r].text===e.yaxis&&(t=scope.possibleResolutions[r]);if(e.xaxis&&e.agg){for(r=0;r<scope.possibleAggregations.length;r++)scope.possibleAggregations[r].text===e.agg&&(i=scope.possibleAggregations[r]);for(r=0;r<scope.possibleResolutions.length;r++)scope.possibleResolutions[r].text===e.xaxis&&(n=scope.possibleResolutions[r])}if(t&&n&&i)TimeseriesUtil.divide(scope.timeseries,t.calc),TimeseriesUtil.divide(scope.timeseries,n.calc),TimeseriesUtil.aggregate(scope.timeseries,i.calc),LAYOUT.scene.xaxis.title=n.text+" "+scope.options.agg,LAYOUT.scene.yaxis.title=t.text;else if(t){TimeseriesUtil.divide(scope.timeseries,t.calc,t);var o=selectMostFittingResolution(scope.timeseries);LAYOUT.scene.yaxis.title=t.text,LAYOUT.scene.xaxis.title="1 ≡ "+scope.timeseries.stepLength/o.value+" "+o.text,"Original"===t.text&&(LAYOUT.scene.yaxis.title=t.text+" ≡ "+scope.timeseries.stepLength/o.value+" "+o.text)}scope.refresh()}},!0),scope.refresh=function(){Plotly.newPlot("plotly",[{z:TimeseriesUtil.getRenderableValues(scope.timeseries),type:"surface"}],LAYOUT)},scope.getYAxisResolutionIndex=function(){if(!scope.options||!scope.options.yaxis)return-1;for(var e=0;e<scope.possibleResolutions.length;e++)if(scope.possibleResolutions[e].text===scope.options.yaxis)return e},scope.setMin=function(e){try{Plotly.restyle("plotly",{cmin:e})}catch(e){console.log("Plotly wurde noch nicht initialisiert.")}},scope.setMax=function(e){try{Plotly.restyle("plotly",{cmax:e})}catch(e){console.log("Plotly wurde noch nicht initialisiert.")}},scope.setColorscale=function(e){try{Plotly.restyle("plotly",{colorscale:e})}catch(e){console.log("Plotly wurde noch nicht initialisiert.")}}}}}),angular.module("TimeseriesAnalysationTool").run(["$templateCache",function(e){e.put("app/chart/three-dim-chart.html",'<div class="row">\n    <div id="plotly" class="col-md-6"></div>\n    <div class="col-md-2 col-md-offset-2">\n        <div class="form-group">\n            <label for="sel1">Y-Achsen Auflösung:</label>\n            <select class="form-control" id="sel1" ng-model="options.yaxis">\n                <option ng-repeat="res in possibleResolutions" ng-disabled="timeseries.stepLength > res.value && res.value"\n                        ng-value="res.text">{{res.text}}</option>\n            </select>\n        </div>\n        <div class="form-group">\n            <label for="sel2">X-Achsen Aggregation:</label>\n            <select class="form-control" id="sel2" ng-model="options.xaxis">\n                <option ng-repeat="res in possibleResolutions" ng-disabled="timeseries.stepLength > res.value || $index > getYAxisResolutionIndex()"\n                        ng-value="res.text">{{res.text}}</option>\n            </select>\n        </div>\n        <div class="form-group">\n            <label for="sel3">Aggregationstyp:</label>\n            <select class="form-control" id="sel3" ng-model="options.agg" ng-disabled="!options.xaxis">\n                <option ng-repeat="agg in possibleAggregations">{{agg.text}}</option>\n            </select>\n        </div>\n        <hr>\n        <div class="form-group">\n            <label for="color">Farbskala:</label>\n            <select class="form-control" id="color" ng-model="color" ng-change="setColorscale(color)">\n                <option ng-repeat="c in possibleColorscales">{{c}}</option>\n            </select>\n        </div>\n\n        <div>\n            <label for="slider1" >Minimum: <i style="font-weight: normal">{{formatNumber(currentMin)}}</i>\n                <input id="slider1" type="range" min="{{range[0]}}" max="{{currentMax}}" step="{{(currentMax - range[0]) / 100}}"\n                       ng-model="currentMin"\n                       style="width:300px"\n                       ng-change="setMin(currentMin)">\n            </label>\n\n            <label for="slider2">Maximum: <i style="font-weight: normal">{{formatNumber(currentMax)}}</i>\n                <input id="slider2" type="range" min="{{currentMin}}" max="{{range[1]}}" step="{{(range[1] - currentMin) / 100}}"\n                       ng-model="currentMax"\n                       style="width:300px"\n                       ng-change="setMax(currentMax)">\n            </label>\n        </div>\n    </div>\n</div>\n\n\n\n')}]),angular.module("TimeseriesAnalysationTool").service("AggregatingService",function(){this.sum=function(e){return e.reduce(function(e,s){return e+s})};var e=this.sum;this.avg=function(s){return e(s)/s.length},this.max=function(e){for(var s=e[0],t=0;t<e.length;t++)e[t]>s&&(s=e[t]);return s},this.min=function(e){for(var s=e[0],t=0;t<e.length;t++)e[t]<s&&(s=e[t]);return s};var s=this;return this.possibleAggregations=[{text:"Summe",calc:s.sum},{text:"Durchschnitt",calc:s.avg},{text:"Maximum",calc:s.max},{text:"Minimum",calc:s.min}],this}),angular.module("TimeseriesAnalysationTool").service("DividingService",function(){function e(e,s,t){var i=[];i.push(e.slice(0,s-t));for(var n=s-t;n<e.length;n+=s)n+s<=e.length?i.push(e.slice(n,n+s)):i.push(e.slice(n));return i}var s=1e3,t=60*s,i=60*t,n=24*i,r=7*n,o=this;return this.fillValues=function(e,s,t,i){var n=t/s-e[0].length;if(0!=n)for(var r=0;r<n;r++)e[0].push(i);if(n=t/s-e[e.length-1].length,0!=n)for(r=0;r<n;r++)e[e.length-1].push(i);return 1===e.length?[e[0],e[0]]:e},this.getSeconds=function(t,i,n){var r=n.getTime()%s;return angular.isArray(t)?e(t,s/i,r):[t]},this.getMinutes=function(s,i,n){var r=n.getTime()%t;return console.log(s,r,t/i),angular.isArray(s)?e(s,t/i,r):[s]},this.getHours=function(s,t,n){var r=n.getTime()%i;return angular.isArray(s)?e(s,i/t,r):[s]},this.getDays=function(s,t,i){var r=i.getTime()%n;return e(s,n/t,r)},this.getWeeks=function(s,t,i){var n=i.getTime()%r;return e(s,r/t,n)},this.possibleResolutions=[{text:"Original",value:null,calc:function(e){return _.map(e,function(e){return[e]})}},{text:"Sekunde/n",value:s,calc:o.getSeconds},{text:"Minute/n",value:t,calc:o.getMinutes},{text:"Stunde/n",value:i,calc:o.getHours},{text:"Tag/e",value:n,calc:o.getDays},{text:"Woche/n",value:r,calc:o.getWeeks}],this}),angular.module("TimeseriesAnalysationTool").service("TimeseriesUtil",function(){return this.newTimeseries=function(e,s,t){return{startDate:e,stepLength:s,values:t,depth:2}},this.divide=function(e,s){var t=this.funcMostInnerArrays(e.values,e.values,s,0,!1,e);angular.isDefined(t)&&(e.depth++,e.values=t)},this.getRenderableValues=function(e){if(e.values&&1===e.values[0].length){for(var s=angular.copy(e.values),t=0;t<e.values.length;t++)s[t].push(s[t][0]);return s}return e.values&&1===e.values.length?(s=angular.copy(e.values),s.push(s[0]),s):e.values},this.aggregate=function(e,s){var t=this.funcMostInnerArrays(e.values,e.values,s,0,!0,e);angular.isDefined(t)&&(e.depth--,e.values=t)},this.funcMostInnerArrays=function(e,s,t,i,n,r){if(angular.isArray(s)&&!angular.isArray(s[0])){var o=r.stepLength;if(n&&(r.stepLength*=s.length),e===s)return t(s,o,r.startDate);e[i]=t(s,o,r.startDate)}else for(var a=0;a<s.length;a++)this.funcMostInnerArrays(s,s[a],t,a,n,r)},this});